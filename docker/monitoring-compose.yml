services:
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./grafana/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver   # ★ 필수

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      INFLUXDB_ORG: my-org
      INFLUXDB_BUCKET: k6
      INFLUXDB_ADMIN_TOKEN: my-super-secret-token
    networks:
      - k6net

  influxdb:
    image: influxdb
    container_name: k6-influxdb
    ports: ["8086:8086"]
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: my-org
      DOCKER_INFLUXDB_INIT_BUCKET: k6
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: my-super-secret-token
    healthcheck:
      test: ["CMD", "influx", "ping", "--host", "http://localhost:8086"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - ./influx:/var/lib/influxdb2
    networks:
      - k6net

  # 자동 실행 OFF: 필요 시 run으로 실행하는 편을 추천
  k6:
    image: grafana/k6:latest
    container_name: k6-runner
    depends_on:
      influxdb:
        condition: service_healthy
      prometheus:
        condition: service_started
    working_dir: /scripts
    environment:
      BASE_URL: http://host.docker.internal:8080
      USERNAME: admin
      PASSWORD: admin
    volumes:
      - ./k6/scripts:/scripts
    networks:
      - k6net
    command:
      - run
      - -o
      - experimental-prometheus-rw=http://prometheus:9090/api/v1/write
      - /scripts/test.js
networks:
  k6net:
    name: k6_network
    driver: bridge
    external: true